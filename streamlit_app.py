import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from src.streamlit_utils import plotly_map, fixNaN

@st.cache_data
def load_raw_data():
    df_2023 = pd.read_csv('data/raw/2023-comptage-velo-donnees-compteurs.csv', sep=';')
    df_2024 = pd.read_csv('data/raw/2024-comptage-velo-donnees-compteurs.csv', sep=';') 
    df = pd.concat([df_2023, df_2024], axis=0)
    df = fixNaN(df)
    return df

# Charger les donn√©es
df = pd.read_csv("data/processed/lieu-compteur-one-hot-encoded.csv", index_col=0)

st.image("streamlit_assets/banniere6.jpeg", use_container_width=True)

#Titres
st.markdown("""
# **Projet Data Science - Trafic Cycliste √† Paris**  
### _de Janvier √† Mars 2025_
""")
st.sidebar.title("Sommaire")
pages=["Pr√©sentation du Projet", "Dataset", "Pre-processing", "Visualisation des donn√©es", "Mod√®les de classification", "Mod√®les de r√©gression", "Interpr√©tation et r√©sultats", "Conclusion"]
page=st.sidebar.radio("Aller vers", pages)


if page == pages[0]:
    st.markdown("## I. Contexte")

    st.markdown("""
Face √† l'essor du v√©lo comme mode de transport durable, la Ville de Paris a mis en place, depuis plusieurs ann√©es, un r√©seau de compteurs √† v√©lo permanents pour mesurer l'√©volution de la pratique cycliste dans la capitale.

Ces capteurs, install√©s sur les axes cl√©s de la ville, collectent en continu des donn√©es sur le flux des cyclistes.
    """)

    st.image("streamlit_assets/comptagev√©lo.jpeg", use_container_width=True)

    st.markdown("""
Ce projet s'inscrit dans une d√©marche de transition vers une mobilit√© plus verte et une volont√© d'adapter les infrastructures urbaines aux besoins r√©els, tel que propos√© dans le plan v√©lo 2021-2026 d'am√©nagement de pistes cyclables de la mairie de Paris.

L'enjeu est de transformer ces donn√©es brutes en insights exploitables, permettant d'√©clairer les d√©cisions publiques de mani√®re objective et data-driven.
    """)





st.markdown("---")


if page == pages[0]: 
    st.markdown("## II. Objectifs")

    st.markdown("""
Ce projet vise √† d√©velopper un **outil pr√©dictif du trafic cycliste √† Paris**, en exploitant les donn√©es historiques des compteurs v√©lo.

### Objectifs principaux :
- Identifier les **tendances d‚Äôusage** (heures de pointe, zones satur√©es, variations saisonni√®res).
- G√©n√©rer des **visualisations claires** (cartes thermiques, graphiques temporels).
- Aider √† la **prise de d√©cision** sur les am√©nagements √† prioriser.

### B√©n√©fices pour la Mairie de Paris :
- Prioriser les **am√©nagements cibl√©s** (pistes √©largies, carrefours s√©curis√©s, nouveaux itin√©raires).
- √âvaluer l‚Äô**impact des politiques existantes**.
- **Optimiser le r√©seau cyclable** √† long terme.

### Ambition finale :
> R√©duire les **conflits d‚Äôusage**, am√©liorer la **s√©curit√©**, et encourager la pratique du v√©lo gr√¢ce √† une **planification data-driven**, combinant **r√©trospective** et **pr√©diction** pour une mobilit√© plus fluide et r√©siliente.
    """)









if page == pages[1]: 

    st.markdown("""
### 1. Source des donn√©es""")  
                
    st.image("streamlit_assets/opendata2.png", use_container_width=True)

    st.markdown("""
- Utilisation des jeux de donn√©es ouverts propos√©s par la Ville de Paris via [opendata.paris.fr](https://opendata.paris.fr) :

  - le jeu de donn√©es [Comptage v√©lo - Donn√©es compteurs](https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information) pour les donn√©es de 2024.
  - le jeu de donn√©es [Comptage v√©lo - Historique - Donn√©es Compteurs et Sites de comptage](https://opendata.paris.fr/explore/dataset/comptage-velo-historique-donnees-compteurs/information) pour les donn√©es de 2023.
                 
- Donn√©es publi√©es sous la licence Open Database License (ODbL), qui autorise la r√©utilisation, l‚Äôadaptation et la cr√©ation de travaux d√©riv√©s √† partir de ces jeux de donn√©es, √† condition d‚Äôen citer la source.

---
                
### 2. P√©riode 
                
Les donn√©es sont mises √† jour quotidiennement. 

Nous avons r√©cup√©r√© toutes les donn√©es du 1er janvier 2023 au 28 f√©vrier 2025 (26 mois).                

---

### 3. Contenu des jeux de donn√©es  
Les jeux de donn√©es recensent les comptages horaires de v√©los effectu√©s par environ une centaine de compteurs r√©partis dans Paris.
                  
Chaque lieu de comptage est g√©n√©ralement √©quip√© de deux compteurs, positionn√©s pour mesurer le trafic dans chaque direction d‚Äôune m√™me rue. 
                 
Au total, pour la p√©riode 2023-2024, le jeu de donn√©es contient environ 1,8 million de lignes r√©parties sur 16 variables.

---

### 4. Structure des donn√©es  
Chaque ligne du dataset correspond au nombre de v√©los enregistr√©s pendant une heure par un compteur donn√©.  
Les donn√©es incluent, en plus du comptage horaire, plusieurs m√©tadonn√©es associ√©es au compteur ou au site de comptage, telles que :
- Le nom et l‚Äôidentifiant du compteur  
- Le lieu de comptage  
- La date d‚Äôinstallation  
- Les coordonn√©es g√©ographiques  
- √âventuellement, des liens vers des photos du site

---

### 5. Nettoyage et s√©lection des variables  
Afin de simplifier et d‚Äôoptimiser l‚Äôanalyse, nous avons supprim√© les variables non pertinentes pour l'entra√Ænement du mod√®le, en particulier les champs techniques ou visuels comme les liens vers les photos, les identifiants internes ou le type d‚Äôimage.  

Voici un extrait de notre dataset avec les variables que nous avons d√©cid√© de conserver :""")

    st.image("streamlit_assets/dataframe.jpeg", use_container_width=True)

    st.markdown("""
---

### 6. Objectif d‚Äôanalyse et variable cible  
L‚Äôobjectif de notre √©tude est de pr√©dire le nombre de v√©los compt√©s pendant une heure sur un compteur donn√©.  
La variable cible de notre mod√®le est donc le comptage horaire, un indicateur cl√© pour analyser l'√©volution de la circulation cycliste dans Paris.

---

### 7. Forces et limites du dataset  
Le dataset se distingue par sa pr√©cision horaire et sa couverture g√©ographique dense, ce qui permet d‚Äôidentifier des tendances temporelles comme les variations quotidiennes ou saisonni√®res du trafic cycliste.  
Cependant, il ne contient pas d‚Äôinformations contextuelles telles que :
- La m√©t√©o  
- La pr√©sence d‚Äô√©v√©nements particuliers (manifestations, gr√®ves, festivals)  
- Ou des donn√©es sociod√©mographiques comme la densit√© de population par zone  

Cette absence limite la profondeur des analyses pr√©dictives que l‚Äôon peut mener.
""")

if page == pages[2]: 

    st.markdown("""
    ### 1. Suppression des NaN 
        
    Certaines variables de m√©tadonn√©es des compteurs ("Identifiant du compteur", "Coordonn√©es g√©ographiques", ...) ont des valeurs NaN (environ 3.4% sur le dataset)

    Plusieurs compteurs du dataset correspondaient en r√©alit√© √† un m√™me emplacement, ce qui a permis de r√©duire les NaN en les renommant et fusionnant. 

    Les derniers NaN provenaient de deux compteurs atypiques, finalement supprim√©s pour obtenir un dataset complet et sans valeurs manquantes

        
    ### 2. Conversion Date au format datetime
                    
    Variable "Date et heure de comptage" convertie au format datetime de 
    Pandas. (fuseau horaire Europe/Paris afin de correctement capturer 
    les tendances journali√®res)
    """) 
                    
    st.code("""
    # Convertir la colonne en datetime (avec gestion du fuseau horaire)
    df["Date et heure de comptage"] = pd.to_datetime(df["Date et heure de comptage"], utc=True)
    df["Date et heure de comptage"] = df["Date et heure de comptage"].dt.tz_localize(None)
    """, language="python")

    st.markdown("""                
    ### 3. Ajout de variables
                    
    La variable "Date et heure de comptage" d√©compos√©e en variables "ann√©e", 
    "mois", "jour", "jour de la semaine" et "heure" afin de faciliter la data visualisation et voir si 
    certaines de ces variables √©taient corr√©l√©s √† notre variable cible. """)
    
    st.code("""
    df["Jour"] = df["Date et heure de comptage"].dt.date
    df["Mois"] = df["Date et heure de comptage"].dt.month
    df["Ann√©e"] = df["Date et heure de comptage"].dt.year
    df["Heure"] = df["Date et heure de comptage"].dt.hour
    """, language="python")

    st.markdown("""   
    
    Ajout des variables cat√©gorielles binaires "Week-end", "Jour f√©ri√©s" et "Vacances scolaires" afin de mesurer si les jours non travaill√©s ont un impact sur la pratique cyclable.  

    ### 4. Normalisation des donn√©es

    Nous avons appliqu√© deux types de **normalisation** sur les colonnes temporelles et contextuelles, notamment pour r√©duire l'impact des valeurs extr√™mes de Comptage horaire sur les pr√©dictions de notre mod√®le,  la variable Comptage horaire ne suivant pas une loi normale :

    1. **Standardisation** : centre les donn√©es autour de 0 avec une variance de 1.
    2. **Min-Max Scaling** : transforme les valeurs dans une plage d√©finie, ici entre 0 et 1.
        """)

    st.markdown("### üîπ Standardisation")

    st.code("""
    from sklearn.preprocessing import StandardScaler

col_norm = ["Jour", "Mois", "Ann√©e", "Heure", "Jour_semaine", "Jour f√©ri√©", "Vacances scolaires"]

scaler = StandardScaler()
df[col_norm] = scaler.fit_transform(df[col_norm])
    """, language="python")

    st.markdown("### üîπ Normalisation Min-Max")

    st.code("""
from sklearn.preprocessing import MinMaxScaler

col_norm = ["Jour", "Mois", "Ann√©e", "Heure", "Jour_semaine", "Jour f√©ri√©", "Vacances scolaires"]

scaler = MinMaxScaler(feature_range=(0, 1))
df[col_norm] = scaler.fit_transform(df[col_norm])
    """, language="python")

    st.markdown("""
    Ces transformations permettent de pr√©parer les donn√©es pour les mod√®les sensibles √† l‚Äô√©chelle des variables (r√©gressions, KNN, etc.).
    """)

    

    st.write("### Extrait du Dataframe apr√®s pr√©-processing")
    st.dataframe(df.head(10))




                
if page == pages[3]: 
    st.write("### Visualisation des donn√©es")



    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    st.markdown("""
    ### I. Cartographie

    Carte de la ville de Paris repr√©sentant les positions des diff√©rents compteurs du dataset (La taille de chaque point correspond au comptage horaire total).""")

    st.plotly_chart(plotly_map(load_raw_data()))

    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    st.markdown("""
    Compteurs sont r√©partis sur les axes principaux :
            
    - Sud-Ouest / Nord-Est (avenue Denfert-Rochereau et boulevard S√©bastopol) 
    - Est-Ouest (avenue de la Grande Arm√©e et avenue des Champs-√âlys√©es). 
    - Les quais de la Seine ainsi que le boulevard p√©riph√©rique Sud (le long de la voie de tram T3a) sont aussi couverts. 
                
    Boulevard p√©riph√©rique nord et les 17 et 18e arrondissements n'ont pas de compteurs. 
    
    Compteurs "centraux" ont plus de comptage que ceux en p√©riph√©rie de Paris : 
    Corr√©lation entre la localisation du compteur et le comptage horaire ?


    ### II. √âvolution temporelle""")

    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    st.markdown(""" 
    ##### a. Saisonnalit√© du trafic""")
    
    fig = plt.figure()
    sns.barplot(df, x='Mois', y='Comptage horaire', errorbar=None)
    plt.xlabel("Mois")
    plt.xticks(rotation=45)
    plt.title("Comptage horaire moyen en fonction du mois");
    st.pyplot(fig)

    st.markdown("""
    <div style='font-size:18px;'>
    On constate une baisse du comptage en <strong>hiver</strong> (janvier et d√©cembre) et en <strong>√©t√©</strong> (au mois d'ao√ªt).<br>
    Cela est peut-√™tre d√ª aux <strong>vacances</strong>, √† certains <strong>√©v√©nements</strong> (JO de Paris en ao√ªt) et √† la <strong>m√©t√©o</strong> (il fait plus froid en hiver, ce qui n'encourage pas la pratique cycliste).
    </div>""", unsafe_allow_html=True)

    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    st.markdown("""
    ##### b. Comportement selon les jours""")
    
    fig = plt.figure(figsize=(10, 5))
    sns.barplot(df, x='Jour_semaine', y='Comptage horaire', errorbar=None)
    plt.xlabel("Jour du mois")
    plt.title("Comptage horaire moyen en fonction du jour de la semaine");
    st.pyplot(fig)

    st.markdown("""
    <div style='font-size:18px;'>
    On constate √©galement plus de <strong>comptages</strong> du <strong>lundi au vendredi</strong>, ce qui correspond aux <strong>trajets domicile-travail</strong>.<br>
    En moyenne, il y a environ <strong>50% de <strong>v√©los</strong> en plus</strong> en <strong>semaine</strong> par rapport au <strong>week-end</strong>.
    </div>
    """, unsafe_allow_html=True)


    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    st.markdown("""
    ##### c. Evolution du trafic au fil des heures""")

    st.markdown("""
    <div style='font-size:18px;'>
    √Ä gauche : <strong>jours de la semaine</strong> (lundi √† vendredi) ‚Äî √Ä droite : <strong>week-end</strong> (samedi et dimanche)
    </div>
    """, unsafe_allow_html=True)

    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)

    # Filtrage
    df_semaine = df[df['Jour_semaine'].isin([1, 2, 3, 4, 5])]
    df_weekend = df[df['Jour_semaine'].isin([6, 7])]

    # D√©termination du m√™me axe Y pour les deux graphiques
    y_max = max(df['Comptage horaire'].max(), 1)  # max global pour fixer l'√©chelle

    # Cr√©ation des deux graphiques c√¥te √† c√¥te
    fig, axes = plt.subplots(1, 2, figsize=(20, 7), sharey=True)

    # Graphique semaine
    sns.barplot(ax=axes[0], data=df_semaine, x='Heure', y='Comptage horaire', errorbar=None)
    axes[0].set_title("Comptage horaire moyen (lundi √† vendredi)")
    axes[0].set_xlabel("Heure de la journ√©e")
    axes[0].set_ylabel("Comptage horaire")
    axes[0].set_ylim(0, 400)

    # Graphique week-end
    sns.barplot(ax=axes[1], data=df_weekend, x='Heure', y='Comptage horaire', errorbar=None)
    axes[1].set_title("Comptage horaire moyen (week-end)")
    axes[1].set_xlabel("Heure de la journ√©e")
    axes[1].set_ylabel("")  # on peut laisser vide pour all√©ger visuellement
    axes[1].set_ylim(0, 400)

    st.pyplot(fig)

    st.markdown("""
    <div style='font-size:18px;'>
    <strong>Forte augmentation du trafic</strong> aux <strong>heures de pointe</strong> (8h‚Äì9h / 18h‚Äì19h) en semaine.<br>
    <strong>Volume de passages</strong> relativement <strong>r√©gulier</strong> entre <strong>11h et 20h</strong> le <strong>week-end</strong>.
    </div>
    """, unsafe_allow_html=True)

    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)
    
    st.markdown("""
    ### III. Corr√©lation entre les variables""")
    
    st.image("streamlit_assets/matrice.jpeg", use_container_width=True)

    st.markdown("""
    <div style='font-size:18px;'>
    <strong>Matrice de corr√©lation entre les variables</strong>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div style='font-size:18px;'>
    <ul>
    <li>Le <strong>comptage horaire</strong> est l√©g√®rement corr√©l√© au <strong>nom du compteur</strong> et √† <strong>l'heure de la journ√©e</strong>.</li>
    <li>Corr√©lation forte entre les variables <strong>jour_semaine</strong> et <strong>week-end</strong> (variables potentiellement redondantes).</li>
    <li>Forte corr√©lation entre <strong>"date et heure de comptage"</strong>, <strong>ann√©e</strong> et <strong>mois</strong>.</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)

   
